
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Utilizador
 * 
 */
export type Utilizador = {
  id: number
  createdAt: Date
  updatedAt: Date
  nome: string
  email: string
  password: string
  telefone: string | null
  role: number
  deleted: boolean
}

/**
 * Model Reserva
 * 
 */
export type Reserva = {
  id: number
  createdAt: Date
  updatedAt: Date
  utilizadorId: number
  mesa: number
  data: Date
  quantidade: number
  observacoes: string | null
  deleted: boolean
}

/**
 * Model Pedido
 * 
 */
export type Pedido = {
  id: number
  mesa: number
  utilizadorId: number
  reservaId: number
  observacoes: string | null
  createdAt: Date
  updatedAt: Date
  status: string
  faturaID: number | null
  deleted: boolean
}

/**
 * Model Produto
 * 
 */
export type Produto = {
  id: number
  nome: string
  categoria: string
  observacoes: string | null
  status: string
  preco: number
  deleted: boolean
}

/**
 * Model Fatura
 * 
 */
export type Fatura = {
  id: number
  utilizadorId: number
  documentoParaFatura: string | null
  formaPagamento: string
  observacoes: string | null
  statusPagamento: string
  deleted: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilizadors
 * const utilizadors = await prisma.utilizador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilizadors
   * const utilizadors = await prisma.utilizador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.utilizador`: Exposes CRUD operations for the **Utilizador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilizadors
    * const utilizadors = await prisma.utilizador.findMany()
    * ```
    */
  get utilizador(): Prisma.UtilizadorDelegate<GlobalReject>;

  /**
   * `prisma.reserva`: Exposes CRUD operations for the **Reserva** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservas
    * const reservas = await prisma.reserva.findMany()
    * ```
    */
  get reserva(): Prisma.ReservaDelegate<GlobalReject>;

  /**
   * `prisma.pedido`: Exposes CRUD operations for the **Pedido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedido.findMany()
    * ```
    */
  get pedido(): Prisma.PedidoDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<GlobalReject>;

  /**
   * `prisma.fatura`: Exposes CRUD operations for the **Fatura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faturas
    * const faturas = await prisma.fatura.findMany()
    * ```
    */
  get fatura(): Prisma.FaturaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilizador: 'Utilizador',
    Reserva: 'Reserva',
    Pedido: 'Pedido',
    Produto: 'Produto',
    Fatura: 'Fatura'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilizadorCountOutputType
   */


  export type UtilizadorCountOutputType = {
    pedidos: number
    reservas: number
    faturas: number
  }

  export type UtilizadorCountOutputTypeSelect = {
    pedidos?: boolean
    reservas?: boolean
    faturas?: boolean
  }

  export type UtilizadorCountOutputTypeGetPayload<S extends boolean | null | undefined | UtilizadorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UtilizadorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UtilizadorCountOutputTypeArgs)
    ? UtilizadorCountOutputType 
    : S extends { select: any } & (UtilizadorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UtilizadorCountOutputType ? UtilizadorCountOutputType[P] : never
  } 
      : UtilizadorCountOutputType




  // Custom InputTypes

  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UtilizadorCountOutputType
     */
    select?: UtilizadorCountOutputTypeSelect | null
  }



  /**
   * Count Type ReservaCountOutputType
   */


  export type ReservaCountOutputType = {
    pedidos: number
  }

  export type ReservaCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type ReservaCountOutputTypeGetPayload<S extends boolean | null | undefined | ReservaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ReservaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ReservaCountOutputTypeArgs)
    ? ReservaCountOutputType 
    : S extends { select: any } & (ReservaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ReservaCountOutputType ? ReservaCountOutputType[P] : never
  } 
      : ReservaCountOutputType




  // Custom InputTypes

  /**
   * ReservaCountOutputType without action
   */
  export type ReservaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ReservaCountOutputType
     */
    select?: ReservaCountOutputTypeSelect | null
  }



  /**
   * Count Type PedidoCountOutputType
   */


  export type PedidoCountOutputType = {
    produtos: number
  }

  export type PedidoCountOutputTypeSelect = {
    produtos?: boolean
  }

  export type PedidoCountOutputTypeGetPayload<S extends boolean | null | undefined | PedidoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PedidoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PedidoCountOutputTypeArgs)
    ? PedidoCountOutputType 
    : S extends { select: any } & (PedidoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PedidoCountOutputType ? PedidoCountOutputType[P] : never
  } 
      : PedidoCountOutputType




  // Custom InputTypes

  /**
   * PedidoCountOutputType without action
   */
  export type PedidoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PedidoCountOutputType
     */
    select?: PedidoCountOutputTypeSelect | null
  }



  /**
   * Count Type ProdutoCountOutputType
   */


  export type ProdutoCountOutputType = {
    pedidos: number
  }

  export type ProdutoCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type ProdutoCountOutputTypeGetPayload<S extends boolean | null | undefined | ProdutoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProdutoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProdutoCountOutputTypeArgs)
    ? ProdutoCountOutputType 
    : S extends { select: any } & (ProdutoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProdutoCountOutputType ? ProdutoCountOutputType[P] : never
  } 
      : ProdutoCountOutputType




  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect | null
  }



  /**
   * Count Type FaturaCountOutputType
   */


  export type FaturaCountOutputType = {
    pedidos: number
  }

  export type FaturaCountOutputTypeSelect = {
    pedidos?: boolean
  }

  export type FaturaCountOutputTypeGetPayload<S extends boolean | null | undefined | FaturaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FaturaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FaturaCountOutputTypeArgs)
    ? FaturaCountOutputType 
    : S extends { select: any } & (FaturaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FaturaCountOutputType ? FaturaCountOutputType[P] : never
  } 
      : FaturaCountOutputType




  // Custom InputTypes

  /**
   * FaturaCountOutputType without action
   */
  export type FaturaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FaturaCountOutputType
     */
    select?: FaturaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Utilizador
   */


  export type AggregateUtilizador = {
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  export type UtilizadorAvgAggregateOutputType = {
    id: number | null
    role: number | null
  }

  export type UtilizadorSumAggregateOutputType = {
    id: number | null
    role: number | null
  }

  export type UtilizadorMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nome: string | null
    email: string | null
    password: string | null
    telefone: string | null
    role: number | null
    deleted: boolean | null
  }

  export type UtilizadorMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nome: string | null
    email: string | null
    password: string | null
    telefone: string | null
    role: number | null
    deleted: boolean | null
  }

  export type UtilizadorCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    nome: number
    email: number
    password: number
    telefone: number
    role: number
    deleted: number
    _all: number
  }


  export type UtilizadorAvgAggregateInputType = {
    id?: true
    role?: true
  }

  export type UtilizadorSumAggregateInputType = {
    id?: true
    role?: true
  }

  export type UtilizadorMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    password?: true
    telefone?: true
    role?: true
    deleted?: true
  }

  export type UtilizadorMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    password?: true
    telefone?: true
    role?: true
    deleted?: true
  }

  export type UtilizadorCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    password?: true
    telefone?: true
    role?: true
    deleted?: true
    _all?: true
  }

  export type UtilizadorAggregateArgs = {
    /**
     * Filter which Utilizador to aggregate.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilizadors
    **/
    _count?: true | UtilizadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilizadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilizadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilizadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilizadorMaxAggregateInputType
  }

  export type GetUtilizadorAggregateType<T extends UtilizadorAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilizador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilizador[P]>
      : GetScalarType<T[P], AggregateUtilizador[P]>
  }




  export type UtilizadorGroupByArgs = {
    where?: UtilizadorWhereInput
    orderBy?: Enumerable<UtilizadorOrderByWithAggregationInput>
    by: UtilizadorScalarFieldEnum[]
    having?: UtilizadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilizadorCountAggregateInputType | true
    _avg?: UtilizadorAvgAggregateInputType
    _sum?: UtilizadorSumAggregateInputType
    _min?: UtilizadorMinAggregateInputType
    _max?: UtilizadorMaxAggregateInputType
  }


  export type UtilizadorGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    nome: string
    email: string
    password: string
    telefone: string | null
    role: number
    deleted: boolean
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  type GetUtilizadorGroupByPayload<T extends UtilizadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UtilizadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilizadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
            : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
        }
      >
    >


  export type UtilizadorSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    telefone?: boolean
    role?: boolean
    deleted?: boolean
    pedidos?: boolean | Utilizador$pedidosArgs
    reservas?: boolean | Utilizador$reservasArgs
    faturas?: boolean | Utilizador$faturasArgs
    _count?: boolean | UtilizadorCountOutputTypeArgs
  }


  export type UtilizadorInclude = {
    pedidos?: boolean | Utilizador$pedidosArgs
    reservas?: boolean | Utilizador$reservasArgs
    faturas?: boolean | Utilizador$faturasArgs
    _count?: boolean | UtilizadorCountOutputTypeArgs
  }

  export type UtilizadorGetPayload<S extends boolean | null | undefined | UtilizadorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Utilizador :
    S extends undefined ? never :
    S extends { include: any } & (UtilizadorArgs | UtilizadorFindManyArgs)
    ? Utilizador  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends 'reservas' ? Array < ReservaGetPayload<S['include'][P]>>  :
        P extends 'faturas' ? Array < FaturaGetPayload<S['include'][P]>>  :
        P extends '_count' ? UtilizadorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UtilizadorArgs | UtilizadorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends 'reservas' ? Array < ReservaGetPayload<S['select'][P]>>  :
        P extends 'faturas' ? Array < FaturaGetPayload<S['select'][P]>>  :
        P extends '_count' ? UtilizadorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Utilizador ? Utilizador[P] : never
  } 
      : Utilizador


  type UtilizadorCountArgs = 
    Omit<UtilizadorFindManyArgs, 'select' | 'include'> & {
      select?: UtilizadorCountAggregateInputType | true
    }

  export interface UtilizadorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Utilizador that matches the filter.
     * @param {UtilizadorFindUniqueArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UtilizadorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UtilizadorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Utilizador'> extends True ? Prisma__UtilizadorClient<UtilizadorGetPayload<T>> : Prisma__UtilizadorClient<UtilizadorGetPayload<T> | null, null>

    /**
     * Find one Utilizador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UtilizadorFindUniqueOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UtilizadorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UtilizadorFindUniqueOrThrowArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Find the first Utilizador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UtilizadorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UtilizadorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Utilizador'> extends True ? Prisma__UtilizadorClient<UtilizadorGetPayload<T>> : Prisma__UtilizadorClient<UtilizadorGetPayload<T> | null, null>

    /**
     * Find the first Utilizador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UtilizadorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UtilizadorFindFirstOrThrowArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Find zero or more Utilizadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilizadors
     * const utilizadors = await prisma.utilizador.findMany()
     * 
     * // Get first 10 Utilizadors
     * const utilizadors = await prisma.utilizador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilizadorWithIdOnly = await prisma.utilizador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UtilizadorFindManyArgs>(
      args?: SelectSubset<T, UtilizadorFindManyArgs>
    ): Prisma.PrismaPromise<Array<UtilizadorGetPayload<T>>>

    /**
     * Create a Utilizador.
     * @param {UtilizadorCreateArgs} args - Arguments to create a Utilizador.
     * @example
     * // Create one Utilizador
     * const Utilizador = await prisma.utilizador.create({
     *   data: {
     *     // ... data to create a Utilizador
     *   }
     * })
     * 
    **/
    create<T extends UtilizadorCreateArgs>(
      args: SelectSubset<T, UtilizadorCreateArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Create many Utilizadors.
     *     @param {UtilizadorCreateManyArgs} args - Arguments to create many Utilizadors.
     *     @example
     *     // Create many Utilizadors
     *     const utilizador = await prisma.utilizador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UtilizadorCreateManyArgs>(
      args?: SelectSubset<T, UtilizadorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilizador.
     * @param {UtilizadorDeleteArgs} args - Arguments to delete one Utilizador.
     * @example
     * // Delete one Utilizador
     * const Utilizador = await prisma.utilizador.delete({
     *   where: {
     *     // ... filter to delete one Utilizador
     *   }
     * })
     * 
    **/
    delete<T extends UtilizadorDeleteArgs>(
      args: SelectSubset<T, UtilizadorDeleteArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Update one Utilizador.
     * @param {UtilizadorUpdateArgs} args - Arguments to update one Utilizador.
     * @example
     * // Update one Utilizador
     * const utilizador = await prisma.utilizador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UtilizadorUpdateArgs>(
      args: SelectSubset<T, UtilizadorUpdateArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Delete zero or more Utilizadors.
     * @param {UtilizadorDeleteManyArgs} args - Arguments to filter Utilizadors to delete.
     * @example
     * // Delete a few Utilizadors
     * const { count } = await prisma.utilizador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UtilizadorDeleteManyArgs>(
      args?: SelectSubset<T, UtilizadorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilizadors
     * const utilizador = await prisma.utilizador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UtilizadorUpdateManyArgs>(
      args: SelectSubset<T, UtilizadorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilizador.
     * @param {UtilizadorUpsertArgs} args - Arguments to update or create a Utilizador.
     * @example
     * // Update or create a Utilizador
     * const utilizador = await prisma.utilizador.upsert({
     *   create: {
     *     // ... data to create a Utilizador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilizador we want to update
     *   }
     * })
    **/
    upsert<T extends UtilizadorUpsertArgs>(
      args: SelectSubset<T, UtilizadorUpsertArgs>
    ): Prisma__UtilizadorClient<UtilizadorGetPayload<T>>

    /**
     * Count the number of Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorCountArgs} args - Arguments to filter Utilizadors to count.
     * @example
     * // Count the number of Utilizadors
     * const count = await prisma.utilizador.count({
     *   where: {
     *     // ... the filter for the Utilizadors we want to count
     *   }
     * })
    **/
    count<T extends UtilizadorCountArgs>(
      args?: Subset<T, UtilizadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilizadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilizadorAggregateArgs>(args: Subset<T, UtilizadorAggregateArgs>): Prisma.PrismaPromise<GetUtilizadorAggregateType<T>>

    /**
     * Group by Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilizadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilizadorGroupByArgs['orderBy'] }
        : { orderBy?: UtilizadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilizadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilizadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilizador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UtilizadorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pedidos<T extends Utilizador$pedidosArgs= {}>(args?: Subset<T, Utilizador$pedidosArgs>): Prisma.PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    reservas<T extends Utilizador$reservasArgs= {}>(args?: Subset<T, Utilizador$reservasArgs>): Prisma.PrismaPromise<Array<ReservaGetPayload<T>>| Null>;

    faturas<T extends Utilizador$faturasArgs= {}>(args?: Subset<T, Utilizador$faturasArgs>): Prisma.PrismaPromise<Array<FaturaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Utilizador base type for findUnique actions
   */
  export type UtilizadorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador findUnique
   */
  export interface UtilizadorFindUniqueArgs extends UtilizadorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Utilizador findUniqueOrThrow
   */
  export type UtilizadorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador base type for findFirst actions
   */
  export type UtilizadorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }

  /**
   * Utilizador findFirst
   */
  export interface UtilizadorFindFirstArgs extends UtilizadorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Utilizador findFirstOrThrow
   */
  export type UtilizadorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }


  /**
   * Utilizador findMany
   */
  export type UtilizadorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter, which Utilizadors to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }


  /**
   * Utilizador create
   */
  export type UtilizadorCreateArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * The data needed to create a Utilizador.
     */
    data: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
  }


  /**
   * Utilizador createMany
   */
  export type UtilizadorCreateManyArgs = {
    /**
     * The data used to create many Utilizadors.
     */
    data: Enumerable<UtilizadorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Utilizador update
   */
  export type UtilizadorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * The data needed to update a Utilizador.
     */
    data: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
    /**
     * Choose, which Utilizador to update.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador updateMany
   */
  export type UtilizadorUpdateManyArgs = {
    /**
     * The data used to update Utilizadors.
     */
    data: XOR<UtilizadorUpdateManyMutationInput, UtilizadorUncheckedUpdateManyInput>
    /**
     * Filter which Utilizadors to update
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador upsert
   */
  export type UtilizadorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * The filter to search for the Utilizador to update in case it exists.
     */
    where: UtilizadorWhereUniqueInput
    /**
     * In case the Utilizador found by the `where` argument doesn't exist, create a new Utilizador with this data.
     */
    create: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
    /**
     * In case the Utilizador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
  }


  /**
   * Utilizador delete
   */
  export type UtilizadorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
    /**
     * Filter which Utilizador to delete.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador deleteMany
   */
  export type UtilizadorDeleteManyArgs = {
    /**
     * Filter which Utilizadors to delete
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador.pedidos
   */
  export type Utilizador$pedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Utilizador.reservas
   */
  export type Utilizador$reservasArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    where?: ReservaWhereInput
    orderBy?: Enumerable<ReservaOrderByWithRelationInput>
    cursor?: ReservaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReservaScalarFieldEnum>
  }


  /**
   * Utilizador.faturas
   */
  export type Utilizador$faturasArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    where?: FaturaWhereInput
    orderBy?: Enumerable<FaturaOrderByWithRelationInput>
    cursor?: FaturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FaturaScalarFieldEnum>
  }


  /**
   * Utilizador without action
   */
  export type UtilizadorArgs = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude | null
  }



  /**
   * Model Reserva
   */


  export type AggregateReserva = {
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  export type ReservaAvgAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
    mesa: number | null
    quantidade: number | null
  }

  export type ReservaSumAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
    mesa: number | null
    quantidade: number | null
  }

  export type ReservaMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    utilizadorId: number | null
    mesa: number | null
    data: Date | null
    quantidade: number | null
    observacoes: string | null
    deleted: boolean | null
  }

  export type ReservaMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    utilizadorId: number | null
    mesa: number | null
    data: Date | null
    quantidade: number | null
    observacoes: string | null
    deleted: boolean | null
  }

  export type ReservaCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    utilizadorId: number
    mesa: number
    data: number
    quantidade: number
    observacoes: number
    deleted: number
    _all: number
  }


  export type ReservaAvgAggregateInputType = {
    id?: true
    utilizadorId?: true
    mesa?: true
    quantidade?: true
  }

  export type ReservaSumAggregateInputType = {
    id?: true
    utilizadorId?: true
    mesa?: true
    quantidade?: true
  }

  export type ReservaMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    utilizadorId?: true
    mesa?: true
    data?: true
    quantidade?: true
    observacoes?: true
    deleted?: true
  }

  export type ReservaMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    utilizadorId?: true
    mesa?: true
    data?: true
    quantidade?: true
    observacoes?: true
    deleted?: true
  }

  export type ReservaCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    utilizadorId?: true
    mesa?: true
    data?: true
    quantidade?: true
    observacoes?: true
    deleted?: true
    _all?: true
  }

  export type ReservaAggregateArgs = {
    /**
     * Filter which Reserva to aggregate.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservas
    **/
    _count?: true | ReservaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservaMaxAggregateInputType
  }

  export type GetReservaAggregateType<T extends ReservaAggregateArgs> = {
        [P in keyof T & keyof AggregateReserva]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReserva[P]>
      : GetScalarType<T[P], AggregateReserva[P]>
  }




  export type ReservaGroupByArgs = {
    where?: ReservaWhereInput
    orderBy?: Enumerable<ReservaOrderByWithAggregationInput>
    by: ReservaScalarFieldEnum[]
    having?: ReservaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservaCountAggregateInputType | true
    _avg?: ReservaAvgAggregateInputType
    _sum?: ReservaSumAggregateInputType
    _min?: ReservaMinAggregateInputType
    _max?: ReservaMaxAggregateInputType
  }


  export type ReservaGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    utilizadorId: number
    mesa: number
    data: Date
    quantidade: number
    observacoes: string | null
    deleted: boolean
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  type GetReservaGroupByPayload<T extends ReservaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReservaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservaGroupByOutputType[P]>
            : GetScalarType<T[P], ReservaGroupByOutputType[P]>
        }
      >
    >


  export type ReservaSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    utilizadorId?: boolean
    mesa?: boolean
    data?: boolean
    quantidade?: boolean
    observacoes?: boolean
    deleted?: boolean
    utilizador?: boolean | UtilizadorArgs
    pedidos?: boolean | Reserva$pedidosArgs
    _count?: boolean | ReservaCountOutputTypeArgs
  }


  export type ReservaInclude = {
    utilizador?: boolean | UtilizadorArgs
    pedidos?: boolean | Reserva$pedidosArgs
    _count?: boolean | ReservaCountOutputTypeArgs
  }

  export type ReservaGetPayload<S extends boolean | null | undefined | ReservaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reserva :
    S extends undefined ? never :
    S extends { include: any } & (ReservaArgs | ReservaFindManyArgs)
    ? Reserva  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['include'][P]> :
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ReservaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReservaArgs | ReservaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['select'][P]> :
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ReservaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Reserva ? Reserva[P] : never
  } 
      : Reserva


  type ReservaCountArgs = 
    Omit<ReservaFindManyArgs, 'select' | 'include'> & {
      select?: ReservaCountAggregateInputType | true
    }

  export interface ReservaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Reserva that matches the filter.
     * @param {ReservaFindUniqueArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReservaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reserva'> extends True ? Prisma__ReservaClient<ReservaGetPayload<T>> : Prisma__ReservaClient<ReservaGetPayload<T> | null, null>

    /**
     * Find one Reserva that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservaFindUniqueOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReservaFindUniqueOrThrowArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Find the first Reserva that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReservaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reserva'> extends True ? Prisma__ReservaClient<ReservaGetPayload<T>> : Prisma__ReservaClient<ReservaGetPayload<T> | null, null>

    /**
     * Find the first Reserva that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReservaFindFirstOrThrowArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Find zero or more Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservas
     * const reservas = await prisma.reserva.findMany()
     * 
     * // Get first 10 Reservas
     * const reservas = await prisma.reserva.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservaWithIdOnly = await prisma.reserva.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReservaFindManyArgs>(
      args?: SelectSubset<T, ReservaFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReservaGetPayload<T>>>

    /**
     * Create a Reserva.
     * @param {ReservaCreateArgs} args - Arguments to create a Reserva.
     * @example
     * // Create one Reserva
     * const Reserva = await prisma.reserva.create({
     *   data: {
     *     // ... data to create a Reserva
     *   }
     * })
     * 
    **/
    create<T extends ReservaCreateArgs>(
      args: SelectSubset<T, ReservaCreateArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Create many Reservas.
     *     @param {ReservaCreateManyArgs} args - Arguments to create many Reservas.
     *     @example
     *     // Create many Reservas
     *     const reserva = await prisma.reserva.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservaCreateManyArgs>(
      args?: SelectSubset<T, ReservaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reserva.
     * @param {ReservaDeleteArgs} args - Arguments to delete one Reserva.
     * @example
     * // Delete one Reserva
     * const Reserva = await prisma.reserva.delete({
     *   where: {
     *     // ... filter to delete one Reserva
     *   }
     * })
     * 
    **/
    delete<T extends ReservaDeleteArgs>(
      args: SelectSubset<T, ReservaDeleteArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Update one Reserva.
     * @param {ReservaUpdateArgs} args - Arguments to update one Reserva.
     * @example
     * // Update one Reserva
     * const reserva = await prisma.reserva.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservaUpdateArgs>(
      args: SelectSubset<T, ReservaUpdateArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Delete zero or more Reservas.
     * @param {ReservaDeleteManyArgs} args - Arguments to filter Reservas to delete.
     * @example
     * // Delete a few Reservas
     * const { count } = await prisma.reserva.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservaDeleteManyArgs>(
      args?: SelectSubset<T, ReservaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservas
     * const reserva = await prisma.reserva.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservaUpdateManyArgs>(
      args: SelectSubset<T, ReservaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reserva.
     * @param {ReservaUpsertArgs} args - Arguments to update or create a Reserva.
     * @example
     * // Update or create a Reserva
     * const reserva = await prisma.reserva.upsert({
     *   create: {
     *     // ... data to create a Reserva
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reserva we want to update
     *   }
     * })
    **/
    upsert<T extends ReservaUpsertArgs>(
      args: SelectSubset<T, ReservaUpsertArgs>
    ): Prisma__ReservaClient<ReservaGetPayload<T>>

    /**
     * Count the number of Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaCountArgs} args - Arguments to filter Reservas to count.
     * @example
     * // Count the number of Reservas
     * const count = await prisma.reserva.count({
     *   where: {
     *     // ... the filter for the Reservas we want to count
     *   }
     * })
    **/
    count<T extends ReservaCountArgs>(
      args?: Subset<T, ReservaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservaAggregateArgs>(args: Subset<T, ReservaAggregateArgs>): Prisma.PrismaPromise<GetReservaAggregateType<T>>

    /**
     * Group by Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservaGroupByArgs['orderBy'] }
        : { orderBy?: ReservaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reserva.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReservaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    utilizador<T extends UtilizadorArgs= {}>(args?: Subset<T, UtilizadorArgs>): Prisma__UtilizadorClient<UtilizadorGetPayload<T> | Null>;

    pedidos<T extends Reserva$pedidosArgs= {}>(args?: Subset<T, Reserva$pedidosArgs>): Prisma.PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reserva base type for findUnique actions
   */
  export type ReservaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }

  /**
   * Reserva findUnique
   */
  export interface ReservaFindUniqueArgs extends ReservaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reserva findUniqueOrThrow
   */
  export type ReservaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva base type for findFirst actions
   */
  export type ReservaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: Enumerable<ReservaScalarFieldEnum>
  }

  /**
   * Reserva findFirst
   */
  export interface ReservaFindFirstArgs extends ReservaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reserva findFirstOrThrow
   */
  export type ReservaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: Enumerable<ReservaScalarFieldEnum>
  }


  /**
   * Reserva findMany
   */
  export type ReservaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: Enumerable<ReservaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    distinct?: Enumerable<ReservaScalarFieldEnum>
  }


  /**
   * Reserva create
   */
  export type ReservaCreateArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * The data needed to create a Reserva.
     */
    data: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
  }


  /**
   * Reserva createMany
   */
  export type ReservaCreateManyArgs = {
    /**
     * The data used to create many Reservas.
     */
    data: Enumerable<ReservaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reserva update
   */
  export type ReservaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * The data needed to update a Reserva.
     */
    data: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
    /**
     * Choose, which Reserva to update.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva updateMany
   */
  export type ReservaUpdateManyArgs = {
    /**
     * The data used to update Reservas.
     */
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyInput>
    /**
     * Filter which Reservas to update
     */
    where?: ReservaWhereInput
  }


  /**
   * Reserva upsert
   */
  export type ReservaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * The filter to search for the Reserva to update in case it exists.
     */
    where: ReservaWhereUniqueInput
    /**
     * In case the Reserva found by the `where` argument doesn't exist, create a new Reserva with this data.
     */
    create: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
    /**
     * In case the Reserva was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
  }


  /**
   * Reserva delete
   */
  export type ReservaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
    /**
     * Filter which Reserva to delete.
     */
    where: ReservaWhereUniqueInput
  }


  /**
   * Reserva deleteMany
   */
  export type ReservaDeleteManyArgs = {
    /**
     * Filter which Reservas to delete
     */
    where?: ReservaWhereInput
  }


  /**
   * Reserva.pedidos
   */
  export type Reserva$pedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Reserva without action
   */
  export type ReservaArgs = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservaInclude | null
  }



  /**
   * Model Pedido
   */


  export type AggregatePedido = {
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  export type PedidoAvgAggregateOutputType = {
    id: number | null
    mesa: number | null
    utilizadorId: number | null
    reservaId: number | null
    faturaID: number | null
  }

  export type PedidoSumAggregateOutputType = {
    id: number | null
    mesa: number | null
    utilizadorId: number | null
    reservaId: number | null
    faturaID: number | null
  }

  export type PedidoMinAggregateOutputType = {
    id: number | null
    mesa: number | null
    utilizadorId: number | null
    reservaId: number | null
    observacoes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    faturaID: number | null
    deleted: boolean | null
  }

  export type PedidoMaxAggregateOutputType = {
    id: number | null
    mesa: number | null
    utilizadorId: number | null
    reservaId: number | null
    observacoes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    faturaID: number | null
    deleted: boolean | null
  }

  export type PedidoCountAggregateOutputType = {
    id: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes: number
    createdAt: number
    updatedAt: number
    status: number
    faturaID: number
    deleted: number
    _all: number
  }


  export type PedidoAvgAggregateInputType = {
    id?: true
    mesa?: true
    utilizadorId?: true
    reservaId?: true
    faturaID?: true
  }

  export type PedidoSumAggregateInputType = {
    id?: true
    mesa?: true
    utilizadorId?: true
    reservaId?: true
    faturaID?: true
  }

  export type PedidoMinAggregateInputType = {
    id?: true
    mesa?: true
    utilizadorId?: true
    reservaId?: true
    observacoes?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    faturaID?: true
    deleted?: true
  }

  export type PedidoMaxAggregateInputType = {
    id?: true
    mesa?: true
    utilizadorId?: true
    reservaId?: true
    observacoes?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    faturaID?: true
    deleted?: true
  }

  export type PedidoCountAggregateInputType = {
    id?: true
    mesa?: true
    utilizadorId?: true
    reservaId?: true
    observacoes?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    faturaID?: true
    deleted?: true
    _all?: true
  }

  export type PedidoAggregateArgs = {
    /**
     * Filter which Pedido to aggregate.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pedidos
    **/
    _count?: true | PedidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidoMaxAggregateInputType
  }

  export type GetPedidoAggregateType<T extends PedidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePedido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedido[P]>
      : GetScalarType<T[P], AggregatePedido[P]>
  }




  export type PedidoGroupByArgs = {
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithAggregationInput>
    by: PedidoScalarFieldEnum[]
    having?: PedidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidoCountAggregateInputType | true
    _avg?: PedidoAvgAggregateInputType
    _sum?: PedidoSumAggregateInputType
    _min?: PedidoMinAggregateInputType
    _max?: PedidoMaxAggregateInputType
  }


  export type PedidoGroupByOutputType = {
    id: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes: string | null
    createdAt: Date
    updatedAt: Date
    status: string
    faturaID: number | null
    deleted: boolean
    _count: PedidoCountAggregateOutputType | null
    _avg: PedidoAvgAggregateOutputType | null
    _sum: PedidoSumAggregateOutputType | null
    _min: PedidoMinAggregateOutputType | null
    _max: PedidoMaxAggregateOutputType | null
  }

  type GetPedidoGroupByPayload<T extends PedidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PedidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidoGroupByOutputType[P]>
            : GetScalarType<T[P], PedidoGroupByOutputType[P]>
        }
      >
    >


  export type PedidoSelect = {
    id?: boolean
    mesa?: boolean
    utilizadorId?: boolean
    reservaId?: boolean
    observacoes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    faturaID?: boolean
    deleted?: boolean
    utilizador?: boolean | UtilizadorArgs
    reserva?: boolean | ReservaArgs
    produtos?: boolean | Pedido$produtosArgs
    fatura?: boolean | FaturaArgs
    _count?: boolean | PedidoCountOutputTypeArgs
  }


  export type PedidoInclude = {
    utilizador?: boolean | UtilizadorArgs
    reserva?: boolean | ReservaArgs
    produtos?: boolean | Pedido$produtosArgs
    fatura?: boolean | FaturaArgs
    _count?: boolean | PedidoCountOutputTypeArgs
  }

  export type PedidoGetPayload<S extends boolean | null | undefined | PedidoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pedido :
    S extends undefined ? never :
    S extends { include: any } & (PedidoArgs | PedidoFindManyArgs)
    ? Pedido  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['include'][P]> :
        P extends 'reserva' ? ReservaGetPayload<S['include'][P]> :
        P extends 'produtos' ? Array < ProdutoGetPayload<S['include'][P]>>  :
        P extends 'fatura' ? FaturaGetPayload<S['include'][P]> | null :
        P extends '_count' ? PedidoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PedidoArgs | PedidoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['select'][P]> :
        P extends 'reserva' ? ReservaGetPayload<S['select'][P]> :
        P extends 'produtos' ? Array < ProdutoGetPayload<S['select'][P]>>  :
        P extends 'fatura' ? FaturaGetPayload<S['select'][P]> | null :
        P extends '_count' ? PedidoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Pedido ? Pedido[P] : never
  } 
      : Pedido


  type PedidoCountArgs = 
    Omit<PedidoFindManyArgs, 'select' | 'include'> & {
      select?: PedidoCountAggregateInputType | true
    }

  export interface PedidoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pedido that matches the filter.
     * @param {PedidoFindUniqueArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PedidoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PedidoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pedido'> extends True ? Prisma__PedidoClient<PedidoGetPayload<T>> : Prisma__PedidoClient<PedidoGetPayload<T> | null, null>

    /**
     * Find one Pedido that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PedidoFindUniqueOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PedidoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PedidoFindUniqueOrThrowArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Find the first Pedido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PedidoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PedidoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pedido'> extends True ? Prisma__PedidoClient<PedidoGetPayload<T>> : Prisma__PedidoClient<PedidoGetPayload<T> | null, null>

    /**
     * Find the first Pedido that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindFirstOrThrowArgs} args - Arguments to find a Pedido
     * @example
     * // Get one Pedido
     * const pedido = await prisma.pedido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PedidoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PedidoFindFirstOrThrowArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedido.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pedidoWithIdOnly = await prisma.pedido.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PedidoFindManyArgs>(
      args?: SelectSubset<T, PedidoFindManyArgs>
    ): Prisma.PrismaPromise<Array<PedidoGetPayload<T>>>

    /**
     * Create a Pedido.
     * @param {PedidoCreateArgs} args - Arguments to create a Pedido.
     * @example
     * // Create one Pedido
     * const Pedido = await prisma.pedido.create({
     *   data: {
     *     // ... data to create a Pedido
     *   }
     * })
     * 
    **/
    create<T extends PedidoCreateArgs>(
      args: SelectSubset<T, PedidoCreateArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Create many Pedidos.
     *     @param {PedidoCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedido = await prisma.pedido.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PedidoCreateManyArgs>(
      args?: SelectSubset<T, PedidoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pedido.
     * @param {PedidoDeleteArgs} args - Arguments to delete one Pedido.
     * @example
     * // Delete one Pedido
     * const Pedido = await prisma.pedido.delete({
     *   where: {
     *     // ... filter to delete one Pedido
     *   }
     * })
     * 
    **/
    delete<T extends PedidoDeleteArgs>(
      args: SelectSubset<T, PedidoDeleteArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Update one Pedido.
     * @param {PedidoUpdateArgs} args - Arguments to update one Pedido.
     * @example
     * // Update one Pedido
     * const pedido = await prisma.pedido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PedidoUpdateArgs>(
      args: SelectSubset<T, PedidoUpdateArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Delete zero or more Pedidos.
     * @param {PedidoDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PedidoDeleteManyArgs>(
      args?: SelectSubset<T, PedidoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedido = await prisma.pedido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PedidoUpdateManyArgs>(
      args: SelectSubset<T, PedidoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedido.
     * @param {PedidoUpsertArgs} args - Arguments to update or create a Pedido.
     * @example
     * // Update or create a Pedido
     * const pedido = await prisma.pedido.upsert({
     *   create: {
     *     // ... data to create a Pedido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedido we want to update
     *   }
     * })
    **/
    upsert<T extends PedidoUpsertArgs>(
      args: SelectSubset<T, PedidoUpsertArgs>
    ): Prisma__PedidoClient<PedidoGetPayload<T>>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedido.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends PedidoCountArgs>(
      args?: Subset<T, PedidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidoAggregateArgs>(args: Subset<T, PedidoAggregateArgs>): Prisma.PrismaPromise<GetPedidoAggregateType<T>>

    /**
     * Group by Pedido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidoGroupByArgs['orderBy'] }
        : { orderBy?: PedidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pedido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PedidoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    utilizador<T extends UtilizadorArgs= {}>(args?: Subset<T, UtilizadorArgs>): Prisma__UtilizadorClient<UtilizadorGetPayload<T> | Null>;

    reserva<T extends ReservaArgs= {}>(args?: Subset<T, ReservaArgs>): Prisma__ReservaClient<ReservaGetPayload<T> | Null>;

    produtos<T extends Pedido$produtosArgs= {}>(args?: Subset<T, Pedido$produtosArgs>): Prisma.PrismaPromise<Array<ProdutoGetPayload<T>>| Null>;

    fatura<T extends FaturaArgs= {}>(args?: Subset<T, FaturaArgs>): Prisma__FaturaClient<FaturaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pedido base type for findUnique actions
   */
  export type PedidoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }

  /**
   * Pedido findUnique
   */
  export interface PedidoFindUniqueArgs extends PedidoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedido findUniqueOrThrow
   */
  export type PedidoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido base type for findFirst actions
   */
  export type PedidoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }

  /**
   * Pedido findFirst
   */
  export interface PedidoFindFirstArgs extends PedidoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pedido findFirstOrThrow
   */
  export type PedidoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter, which Pedido to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pedidos.
     */
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Pedido findMany
   */
  export type PedidoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter, which Pedidos to fetch.
     */
    where?: PedidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pedidos to fetch.
     */
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pedidos.
     */
    cursor?: PedidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pedidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pedidos.
     */
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Pedido create
   */
  export type PedidoCreateArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * The data needed to create a Pedido.
     */
    data: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
  }


  /**
   * Pedido createMany
   */
  export type PedidoCreateManyArgs = {
    /**
     * The data used to create many Pedidos.
     */
    data: Enumerable<PedidoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pedido update
   */
  export type PedidoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * The data needed to update a Pedido.
     */
    data: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
    /**
     * Choose, which Pedido to update.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido updateMany
   */
  export type PedidoUpdateManyArgs = {
    /**
     * The data used to update Pedidos.
     */
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyInput>
    /**
     * Filter which Pedidos to update
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido upsert
   */
  export type PedidoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * The filter to search for the Pedido to update in case it exists.
     */
    where: PedidoWhereUniqueInput
    /**
     * In case the Pedido found by the `where` argument doesn't exist, create a new Pedido with this data.
     */
    create: XOR<PedidoCreateInput, PedidoUncheckedCreateInput>
    /**
     * In case the Pedido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PedidoUpdateInput, PedidoUncheckedUpdateInput>
  }


  /**
   * Pedido delete
   */
  export type PedidoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    /**
     * Filter which Pedido to delete.
     */
    where: PedidoWhereUniqueInput
  }


  /**
   * Pedido deleteMany
   */
  export type PedidoDeleteManyArgs = {
    /**
     * Filter which Pedidos to delete
     */
    where?: PedidoWhereInput
  }


  /**
   * Pedido.produtos
   */
  export type Pedido$produtosArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Pedido without action
   */
  export type PedidoArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
  }



  /**
   * Model Produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    observacoes: string | null
    status: string | null
    preco: number | null
    deleted: boolean | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    observacoes: string | null
    status: string | null
    preco: number | null
    deleted: boolean | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    categoria: number
    observacoes: number
    status: number
    preco: number
    deleted: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    observacoes?: true
    status?: true
    preco?: true
    deleted?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    observacoes?: true
    status?: true
    preco?: true
    deleted?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    observacoes?: true
    status?: true
    preco?: true
    deleted?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: ProdutoWhereInput
    orderBy?: Enumerable<ProdutoOrderByWithAggregationInput>
    by: ProdutoScalarFieldEnum[]
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    id: number
    nome: string
    categoria: string
    observacoes: string | null
    status: string
    preco: number
    deleted: boolean
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect = {
    id?: boolean
    nome?: boolean
    categoria?: boolean
    observacoes?: boolean
    status?: boolean
    preco?: boolean
    deleted?: boolean
    pedidos?: boolean | Produto$pedidosArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }


  export type ProdutoInclude = {
    pedidos?: boolean | Produto$pedidosArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }

  export type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Produto :
    S extends undefined ? never :
    S extends { include: any } & (ProdutoArgs | ProdutoFindManyArgs)
    ? Produto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProdutoArgs | ProdutoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Produto ? Produto[P] : never
  } 
      : Produto


  type ProdutoCountArgs = 
    Omit<ProdutoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProdutoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindUniqueOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProdutoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Produto'> extends True ? Prisma__ProdutoClient<ProdutoGetPayload<T>> : Prisma__ProdutoClient<ProdutoGetPayload<T> | null, null>

    /**
     * Find the first Produto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutoFindManyArgs>(
      args?: SelectSubset<T, ProdutoFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProdutoGetPayload<T>>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends ProdutoCreateArgs>(
      args: SelectSubset<T, ProdutoCreateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Create many Produtos.
     *     @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutoCreateManyArgs>(
      args?: SelectSubset<T, ProdutoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends ProdutoDeleteArgs>(
      args: SelectSubset<T, ProdutoDeleteArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutoUpdateArgs>(
      args: SelectSubset<T, ProdutoUpdateArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutoDeleteManyArgs>(
      args?: SelectSubset<T, ProdutoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutoUpdateManyArgs>(
      args: SelectSubset<T, ProdutoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutoUpsertArgs>(
      args: SelectSubset<T, ProdutoUpsertArgs>
    ): Prisma__ProdutoClient<ProdutoGetPayload<T>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProdutoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pedidos<T extends Produto$pedidosArgs= {}>(args?: Subset<T, Produto$pedidosArgs>): Prisma.PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Produto base type for findUnique actions
   */
  export type ProdutoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUnique
   */
  export interface ProdutoFindUniqueArgs extends ProdutoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto base type for findFirst actions
   */
  export type ProdutoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }

  /**
   * Produto findFirst
   */
  export interface ProdutoFindFirstArgs extends ProdutoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * Produto create
   */
  export type ProdutoCreateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }


  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs = {
    /**
     * The data used to create many Produtos.
     */
    data: Enumerable<ProdutoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Produto update
   */
  export type ProdutoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }


  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }


  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }


  /**
   * Produto.pedidos
   */
  export type Produto$pedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Produto without action
   */
  export type ProdutoArgs = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProdutoInclude | null
  }



  /**
   * Model Fatura
   */


  export type AggregateFatura = {
    _count: FaturaCountAggregateOutputType | null
    _avg: FaturaAvgAggregateOutputType | null
    _sum: FaturaSumAggregateOutputType | null
    _min: FaturaMinAggregateOutputType | null
    _max: FaturaMaxAggregateOutputType | null
  }

  export type FaturaAvgAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type FaturaSumAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type FaturaMinAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
    documentoParaFatura: string | null
    formaPagamento: string | null
    observacoes: string | null
    statusPagamento: string | null
    deleted: boolean | null
  }

  export type FaturaMaxAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
    documentoParaFatura: string | null
    formaPagamento: string | null
    observacoes: string | null
    statusPagamento: string | null
    deleted: boolean | null
  }

  export type FaturaCountAggregateOutputType = {
    id: number
    utilizadorId: number
    documentoParaFatura: number
    formaPagamento: number
    observacoes: number
    statusPagamento: number
    deleted: number
    _all: number
  }


  export type FaturaAvgAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type FaturaSumAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type FaturaMinAggregateInputType = {
    id?: true
    utilizadorId?: true
    documentoParaFatura?: true
    formaPagamento?: true
    observacoes?: true
    statusPagamento?: true
    deleted?: true
  }

  export type FaturaMaxAggregateInputType = {
    id?: true
    utilizadorId?: true
    documentoParaFatura?: true
    formaPagamento?: true
    observacoes?: true
    statusPagamento?: true
    deleted?: true
  }

  export type FaturaCountAggregateInputType = {
    id?: true
    utilizadorId?: true
    documentoParaFatura?: true
    formaPagamento?: true
    observacoes?: true
    statusPagamento?: true
    deleted?: true
    _all?: true
  }

  export type FaturaAggregateArgs = {
    /**
     * Filter which Fatura to aggregate.
     */
    where?: FaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturas to fetch.
     */
    orderBy?: Enumerable<FaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faturas
    **/
    _count?: true | FaturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaturaMaxAggregateInputType
  }

  export type GetFaturaAggregateType<T extends FaturaAggregateArgs> = {
        [P in keyof T & keyof AggregateFatura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFatura[P]>
      : GetScalarType<T[P], AggregateFatura[P]>
  }




  export type FaturaGroupByArgs = {
    where?: FaturaWhereInput
    orderBy?: Enumerable<FaturaOrderByWithAggregationInput>
    by: FaturaScalarFieldEnum[]
    having?: FaturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaturaCountAggregateInputType | true
    _avg?: FaturaAvgAggregateInputType
    _sum?: FaturaSumAggregateInputType
    _min?: FaturaMinAggregateInputType
    _max?: FaturaMaxAggregateInputType
  }


  export type FaturaGroupByOutputType = {
    id: number
    utilizadorId: number
    documentoParaFatura: string | null
    formaPagamento: string
    observacoes: string | null
    statusPagamento: string
    deleted: boolean
    _count: FaturaCountAggregateOutputType | null
    _avg: FaturaAvgAggregateOutputType | null
    _sum: FaturaSumAggregateOutputType | null
    _min: FaturaMinAggregateOutputType | null
    _max: FaturaMaxAggregateOutputType | null
  }

  type GetFaturaGroupByPayload<T extends FaturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FaturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaturaGroupByOutputType[P]>
            : GetScalarType<T[P], FaturaGroupByOutputType[P]>
        }
      >
    >


  export type FaturaSelect = {
    id?: boolean
    utilizadorId?: boolean
    documentoParaFatura?: boolean
    formaPagamento?: boolean
    observacoes?: boolean
    statusPagamento?: boolean
    deleted?: boolean
    utilizador?: boolean | UtilizadorArgs
    pedidos?: boolean | Fatura$pedidosArgs
    _count?: boolean | FaturaCountOutputTypeArgs
  }


  export type FaturaInclude = {
    utilizador?: boolean | UtilizadorArgs
    pedidos?: boolean | Fatura$pedidosArgs
    _count?: boolean | FaturaCountOutputTypeArgs
  }

  export type FaturaGetPayload<S extends boolean | null | undefined | FaturaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Fatura :
    S extends undefined ? never :
    S extends { include: any } & (FaturaArgs | FaturaFindManyArgs)
    ? Fatura  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['include'][P]> :
        P extends 'pedidos' ? Array < PedidoGetPayload<S['include'][P]>>  :
        P extends '_count' ? FaturaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FaturaArgs | FaturaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'utilizador' ? UtilizadorGetPayload<S['select'][P]> :
        P extends 'pedidos' ? Array < PedidoGetPayload<S['select'][P]>>  :
        P extends '_count' ? FaturaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Fatura ? Fatura[P] : never
  } 
      : Fatura


  type FaturaCountArgs = 
    Omit<FaturaFindManyArgs, 'select' | 'include'> & {
      select?: FaturaCountAggregateInputType | true
    }

  export interface FaturaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Fatura that matches the filter.
     * @param {FaturaFindUniqueArgs} args - Arguments to find a Fatura
     * @example
     * // Get one Fatura
     * const fatura = await prisma.fatura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FaturaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FaturaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fatura'> extends True ? Prisma__FaturaClient<FaturaGetPayload<T>> : Prisma__FaturaClient<FaturaGetPayload<T> | null, null>

    /**
     * Find one Fatura that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FaturaFindUniqueOrThrowArgs} args - Arguments to find a Fatura
     * @example
     * // Get one Fatura
     * const fatura = await prisma.fatura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FaturaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FaturaFindUniqueOrThrowArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Find the first Fatura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaFindFirstArgs} args - Arguments to find a Fatura
     * @example
     * // Get one Fatura
     * const fatura = await prisma.fatura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FaturaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FaturaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fatura'> extends True ? Prisma__FaturaClient<FaturaGetPayload<T>> : Prisma__FaturaClient<FaturaGetPayload<T> | null, null>

    /**
     * Find the first Fatura that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaFindFirstOrThrowArgs} args - Arguments to find a Fatura
     * @example
     * // Get one Fatura
     * const fatura = await prisma.fatura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FaturaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FaturaFindFirstOrThrowArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Find zero or more Faturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faturas
     * const faturas = await prisma.fatura.findMany()
     * 
     * // Get first 10 Faturas
     * const faturas = await prisma.fatura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faturaWithIdOnly = await prisma.fatura.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FaturaFindManyArgs>(
      args?: SelectSubset<T, FaturaFindManyArgs>
    ): Prisma.PrismaPromise<Array<FaturaGetPayload<T>>>

    /**
     * Create a Fatura.
     * @param {FaturaCreateArgs} args - Arguments to create a Fatura.
     * @example
     * // Create one Fatura
     * const Fatura = await prisma.fatura.create({
     *   data: {
     *     // ... data to create a Fatura
     *   }
     * })
     * 
    **/
    create<T extends FaturaCreateArgs>(
      args: SelectSubset<T, FaturaCreateArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Create many Faturas.
     *     @param {FaturaCreateManyArgs} args - Arguments to create many Faturas.
     *     @example
     *     // Create many Faturas
     *     const fatura = await prisma.fatura.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FaturaCreateManyArgs>(
      args?: SelectSubset<T, FaturaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fatura.
     * @param {FaturaDeleteArgs} args - Arguments to delete one Fatura.
     * @example
     * // Delete one Fatura
     * const Fatura = await prisma.fatura.delete({
     *   where: {
     *     // ... filter to delete one Fatura
     *   }
     * })
     * 
    **/
    delete<T extends FaturaDeleteArgs>(
      args: SelectSubset<T, FaturaDeleteArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Update one Fatura.
     * @param {FaturaUpdateArgs} args - Arguments to update one Fatura.
     * @example
     * // Update one Fatura
     * const fatura = await prisma.fatura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FaturaUpdateArgs>(
      args: SelectSubset<T, FaturaUpdateArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Delete zero or more Faturas.
     * @param {FaturaDeleteManyArgs} args - Arguments to filter Faturas to delete.
     * @example
     * // Delete a few Faturas
     * const { count } = await prisma.fatura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FaturaDeleteManyArgs>(
      args?: SelectSubset<T, FaturaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faturas
     * const fatura = await prisma.fatura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FaturaUpdateManyArgs>(
      args: SelectSubset<T, FaturaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fatura.
     * @param {FaturaUpsertArgs} args - Arguments to update or create a Fatura.
     * @example
     * // Update or create a Fatura
     * const fatura = await prisma.fatura.upsert({
     *   create: {
     *     // ... data to create a Fatura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fatura we want to update
     *   }
     * })
    **/
    upsert<T extends FaturaUpsertArgs>(
      args: SelectSubset<T, FaturaUpsertArgs>
    ): Prisma__FaturaClient<FaturaGetPayload<T>>

    /**
     * Count the number of Faturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaCountArgs} args - Arguments to filter Faturas to count.
     * @example
     * // Count the number of Faturas
     * const count = await prisma.fatura.count({
     *   where: {
     *     // ... the filter for the Faturas we want to count
     *   }
     * })
    **/
    count<T extends FaturaCountArgs>(
      args?: Subset<T, FaturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaturaAggregateArgs>(args: Subset<T, FaturaAggregateArgs>): Prisma.PrismaPromise<GetFaturaAggregateType<T>>

    /**
     * Group by Fatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaturaGroupByArgs['orderBy'] }
        : { orderBy?: FaturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Fatura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FaturaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    utilizador<T extends UtilizadorArgs= {}>(args?: Subset<T, UtilizadorArgs>): Prisma__UtilizadorClient<UtilizadorGetPayload<T> | Null>;

    pedidos<T extends Fatura$pedidosArgs= {}>(args?: Subset<T, Fatura$pedidosArgs>): Prisma.PrismaPromise<Array<PedidoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Fatura base type for findUnique actions
   */
  export type FaturaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter, which Fatura to fetch.
     */
    where: FaturaWhereUniqueInput
  }

  /**
   * Fatura findUnique
   */
  export interface FaturaFindUniqueArgs extends FaturaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fatura findUniqueOrThrow
   */
  export type FaturaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter, which Fatura to fetch.
     */
    where: FaturaWhereUniqueInput
  }


  /**
   * Fatura base type for findFirst actions
   */
  export type FaturaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter, which Fatura to fetch.
     */
    where?: FaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturas to fetch.
     */
    orderBy?: Enumerable<FaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faturas.
     */
    cursor?: FaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faturas.
     */
    distinct?: Enumerable<FaturaScalarFieldEnum>
  }

  /**
   * Fatura findFirst
   */
  export interface FaturaFindFirstArgs extends FaturaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fatura findFirstOrThrow
   */
  export type FaturaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter, which Fatura to fetch.
     */
    where?: FaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturas to fetch.
     */
    orderBy?: Enumerable<FaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faturas.
     */
    cursor?: FaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faturas.
     */
    distinct?: Enumerable<FaturaScalarFieldEnum>
  }


  /**
   * Fatura findMany
   */
  export type FaturaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter, which Faturas to fetch.
     */
    where?: FaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faturas to fetch.
     */
    orderBy?: Enumerable<FaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faturas.
     */
    cursor?: FaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faturas.
     */
    skip?: number
    distinct?: Enumerable<FaturaScalarFieldEnum>
  }


  /**
   * Fatura create
   */
  export type FaturaCreateArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * The data needed to create a Fatura.
     */
    data: XOR<FaturaCreateInput, FaturaUncheckedCreateInput>
  }


  /**
   * Fatura createMany
   */
  export type FaturaCreateManyArgs = {
    /**
     * The data used to create many Faturas.
     */
    data: Enumerable<FaturaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fatura update
   */
  export type FaturaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * The data needed to update a Fatura.
     */
    data: XOR<FaturaUpdateInput, FaturaUncheckedUpdateInput>
    /**
     * Choose, which Fatura to update.
     */
    where: FaturaWhereUniqueInput
  }


  /**
   * Fatura updateMany
   */
  export type FaturaUpdateManyArgs = {
    /**
     * The data used to update Faturas.
     */
    data: XOR<FaturaUpdateManyMutationInput, FaturaUncheckedUpdateManyInput>
    /**
     * Filter which Faturas to update
     */
    where?: FaturaWhereInput
  }


  /**
   * Fatura upsert
   */
  export type FaturaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * The filter to search for the Fatura to update in case it exists.
     */
    where: FaturaWhereUniqueInput
    /**
     * In case the Fatura found by the `where` argument doesn't exist, create a new Fatura with this data.
     */
    create: XOR<FaturaCreateInput, FaturaUncheckedCreateInput>
    /**
     * In case the Fatura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaturaUpdateInput, FaturaUncheckedUpdateInput>
  }


  /**
   * Fatura delete
   */
  export type FaturaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
    /**
     * Filter which Fatura to delete.
     */
    where: FaturaWhereUniqueInput
  }


  /**
   * Fatura deleteMany
   */
  export type FaturaDeleteManyArgs = {
    /**
     * Filter which Faturas to delete
     */
    where?: FaturaWhereInput
  }


  /**
   * Fatura.pedidos
   */
  export type Fatura$pedidosArgs = {
    /**
     * Select specific fields to fetch from the Pedido
     */
    select?: PedidoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PedidoInclude | null
    where?: PedidoWhereInput
    orderBy?: Enumerable<PedidoOrderByWithRelationInput>
    cursor?: PedidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PedidoScalarFieldEnum>
  }


  /**
   * Fatura without action
   */
  export type FaturaArgs = {
    /**
     * Select specific fields to fetch from the Fatura
     */
    select?: FaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FaturaInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FaturaScalarFieldEnum: {
    id: 'id',
    utilizadorId: 'utilizadorId',
    documentoParaFatura: 'documentoParaFatura',
    formaPagamento: 'formaPagamento',
    observacoes: 'observacoes',
    statusPagamento: 'statusPagamento',
    deleted: 'deleted'
  };

  export type FaturaScalarFieldEnum = (typeof FaturaScalarFieldEnum)[keyof typeof FaturaScalarFieldEnum]


  export const PedidoScalarFieldEnum: {
    id: 'id',
    mesa: 'mesa',
    utilizadorId: 'utilizadorId',
    reservaId: 'reservaId',
    observacoes: 'observacoes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    faturaID: 'faturaID',
    deleted: 'deleted'
  };

  export type PedidoScalarFieldEnum = (typeof PedidoScalarFieldEnum)[keyof typeof PedidoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    categoria: 'categoria',
    observacoes: 'observacoes',
    status: 'status',
    preco: 'preco',
    deleted: 'deleted'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const ReservaScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    utilizadorId: 'utilizadorId',
    mesa: 'mesa',
    data: 'data',
    quantidade: 'quantidade',
    observacoes: 'observacoes',
    deleted: 'deleted'
  };

  export type ReservaScalarFieldEnum = (typeof ReservaScalarFieldEnum)[keyof typeof ReservaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilizadorScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nome: 'nome',
    email: 'email',
    password: 'password',
    telefone: 'telefone',
    role: 'role',
    deleted: 'deleted'
  };

  export type UtilizadorScalarFieldEnum = (typeof UtilizadorScalarFieldEnum)[keyof typeof UtilizadorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UtilizadorWhereInput = {
    AND?: Enumerable<UtilizadorWhereInput>
    OR?: Enumerable<UtilizadorWhereInput>
    NOT?: Enumerable<UtilizadorWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    nome?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    telefone?: StringNullableFilter | string | null
    role?: IntFilter | number
    deleted?: BoolFilter | boolean
    pedidos?: PedidoListRelationFilter
    reservas?: ReservaListRelationFilter
    faturas?: FaturaListRelationFilter
  }

  export type UtilizadorOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telefone?: SortOrder
    role?: SortOrder
    deleted?: SortOrder
    pedidos?: PedidoOrderByRelationAggregateInput
    reservas?: ReservaOrderByRelationAggregateInput
    faturas?: FaturaOrderByRelationAggregateInput
  }

  export type UtilizadorWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UtilizadorOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telefone?: SortOrder
    role?: SortOrder
    deleted?: SortOrder
    _count?: UtilizadorCountOrderByAggregateInput
    _avg?: UtilizadorAvgOrderByAggregateInput
    _max?: UtilizadorMaxOrderByAggregateInput
    _min?: UtilizadorMinOrderByAggregateInput
    _sum?: UtilizadorSumOrderByAggregateInput
  }

  export type UtilizadorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    OR?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    telefone?: StringNullableWithAggregatesFilter | string | null
    role?: IntWithAggregatesFilter | number
    deleted?: BoolWithAggregatesFilter | boolean
  }

  export type ReservaWhereInput = {
    AND?: Enumerable<ReservaWhereInput>
    OR?: Enumerable<ReservaWhereInput>
    NOT?: Enumerable<ReservaWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    utilizadorId?: IntFilter | number
    mesa?: IntFilter | number
    data?: DateTimeFilter | Date | string
    quantidade?: IntFilter | number
    observacoes?: StringNullableFilter | string | null
    deleted?: BoolFilter | boolean
    utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    pedidos?: PedidoListRelationFilter
  }

  export type ReservaOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    data?: SortOrder
    quantidade?: SortOrder
    observacoes?: SortOrder
    deleted?: SortOrder
    utilizador?: UtilizadorOrderByWithRelationInput
    pedidos?: PedidoOrderByRelationAggregateInput
  }

  export type ReservaWhereUniqueInput = {
    id?: number
  }

  export type ReservaOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    data?: SortOrder
    quantidade?: SortOrder
    observacoes?: SortOrder
    deleted?: SortOrder
    _count?: ReservaCountOrderByAggregateInput
    _avg?: ReservaAvgOrderByAggregateInput
    _max?: ReservaMaxOrderByAggregateInput
    _min?: ReservaMinOrderByAggregateInput
    _sum?: ReservaSumOrderByAggregateInput
  }

  export type ReservaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReservaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReservaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReservaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    utilizadorId?: IntWithAggregatesFilter | number
    mesa?: IntWithAggregatesFilter | number
    data?: DateTimeWithAggregatesFilter | Date | string
    quantidade?: IntWithAggregatesFilter | number
    observacoes?: StringNullableWithAggregatesFilter | string | null
    deleted?: BoolWithAggregatesFilter | boolean
  }

  export type PedidoWhereInput = {
    AND?: Enumerable<PedidoWhereInput>
    OR?: Enumerable<PedidoWhereInput>
    NOT?: Enumerable<PedidoWhereInput>
    id?: IntFilter | number
    mesa?: IntFilter | number
    utilizadorId?: IntFilter | number
    reservaId?: IntFilter | number
    observacoes?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    faturaID?: IntNullableFilter | number | null
    deleted?: BoolFilter | boolean
    utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    reserva?: XOR<ReservaRelationFilter, ReservaWhereInput>
    produtos?: ProdutoListRelationFilter
    fatura?: XOR<FaturaRelationFilter, FaturaWhereInput> | null
  }

  export type PedidoOrderByWithRelationInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    observacoes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    faturaID?: SortOrder
    deleted?: SortOrder
    utilizador?: UtilizadorOrderByWithRelationInput
    reserva?: ReservaOrderByWithRelationInput
    produtos?: ProdutoOrderByRelationAggregateInput
    fatura?: FaturaOrderByWithRelationInput
  }

  export type PedidoWhereUniqueInput = {
    id?: number
  }

  export type PedidoOrderByWithAggregationInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    observacoes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    faturaID?: SortOrder
    deleted?: SortOrder
    _count?: PedidoCountOrderByAggregateInput
    _avg?: PedidoAvgOrderByAggregateInput
    _max?: PedidoMaxOrderByAggregateInput
    _min?: PedidoMinOrderByAggregateInput
    _sum?: PedidoSumOrderByAggregateInput
  }

  export type PedidoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PedidoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    mesa?: IntWithAggregatesFilter | number
    utilizadorId?: IntWithAggregatesFilter | number
    reservaId?: IntWithAggregatesFilter | number
    observacoes?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    faturaID?: IntNullableWithAggregatesFilter | number | null
    deleted?: BoolWithAggregatesFilter | boolean
  }

  export type ProdutoWhereInput = {
    AND?: Enumerable<ProdutoWhereInput>
    OR?: Enumerable<ProdutoWhereInput>
    NOT?: Enumerable<ProdutoWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    categoria?: StringFilter | string
    observacoes?: StringNullableFilter | string | null
    status?: StringFilter | string
    preco?: FloatFilter | number
    deleted?: BoolFilter | boolean
    pedidos?: PedidoListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    observacoes?: SortOrder
    status?: SortOrder
    preco?: SortOrder
    deleted?: SortOrder
    pedidos?: PedidoOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = {
    id?: number
  }

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    observacoes?: SortOrder
    status?: SortOrder
    preco?: SortOrder
    deleted?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProdutoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    categoria?: StringWithAggregatesFilter | string
    observacoes?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
    preco?: FloatWithAggregatesFilter | number
    deleted?: BoolWithAggregatesFilter | boolean
  }

  export type FaturaWhereInput = {
    AND?: Enumerable<FaturaWhereInput>
    OR?: Enumerable<FaturaWhereInput>
    NOT?: Enumerable<FaturaWhereInput>
    id?: IntFilter | number
    utilizadorId?: IntFilter | number
    documentoParaFatura?: StringNullableFilter | string | null
    formaPagamento?: StringFilter | string
    observacoes?: StringNullableFilter | string | null
    statusPagamento?: StringFilter | string
    deleted?: BoolFilter | boolean
    utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    pedidos?: PedidoListRelationFilter
  }

  export type FaturaOrderByWithRelationInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    documentoParaFatura?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    statusPagamento?: SortOrder
    deleted?: SortOrder
    utilizador?: UtilizadorOrderByWithRelationInput
    pedidos?: PedidoOrderByRelationAggregateInput
  }

  export type FaturaWhereUniqueInput = {
    id?: number
  }

  export type FaturaOrderByWithAggregationInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    documentoParaFatura?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    statusPagamento?: SortOrder
    deleted?: SortOrder
    _count?: FaturaCountOrderByAggregateInput
    _avg?: FaturaAvgOrderByAggregateInput
    _max?: FaturaMaxOrderByAggregateInput
    _min?: FaturaMinOrderByAggregateInput
    _sum?: FaturaSumOrderByAggregateInput
  }

  export type FaturaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FaturaScalarWhereWithAggregatesInput>
    OR?: Enumerable<FaturaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FaturaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    utilizadorId?: IntWithAggregatesFilter | number
    documentoParaFatura?: StringNullableWithAggregatesFilter | string | null
    formaPagamento?: StringWithAggregatesFilter | string
    observacoes?: StringNullableWithAggregatesFilter | string | null
    statusPagamento?: StringWithAggregatesFilter | string
    deleted?: BoolWithAggregatesFilter | boolean
  }

  export type UtilizadorCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutUtilizadorInput
    reservas?: ReservaCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUtilizadorInput
    reservas?: ReservaUncheckedCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutUtilizadorNestedInput
    reservas?: ReservaUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutUtilizadorNestedInput
    reservas?: ReservaUncheckedUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
  }

  export type UtilizadorUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UtilizadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReservaCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutReservasInput
    pedidos?: PedidoCreateNestedManyWithoutReservaInput
  }

  export type ReservaUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    utilizadorId: number
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutReservaInput
  }

  export type ReservaUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutReservasNestedInput
    pedidos?: PedidoUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilizadorId?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type ReservaCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    utilizadorId: number
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
  }

  export type ReservaUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReservaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilizadorId?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoCreateInput = {
    mesa: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutPedidosInput
    reserva: ReservaCreateNestedOneWithoutPedidosInput
    produtos?: ProdutoCreateNestedManyWithoutPedidosInput
    fatura?: FaturaCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateInput = {
    id?: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
    produtos?: ProdutoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidoUpdateInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutPedidosNestedInput
    reserva?: ReservaUpdateOneRequiredWithoutPedidosNestedInput
    produtos?: ProdutoUpdateManyWithoutPedidosNestedInput
    fatura?: FaturaUpdateOneWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    produtos?: ProdutoUncheckedUpdateManyWithoutPedidosNestedInput
  }

  export type PedidoCreateManyInput = {
    id?: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
  }

  export type PedidoUpdateManyMutationInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoCreateInput = {
    nome: string
    categoria: string
    observacoes?: string | null
    status?: string
    preco: number
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutProdutosInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    nome: string
    categoria: string
    observacoes?: string | null
    status?: string
    preco: number
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutProdutosInput
  }

  export type ProdutoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutProdutosNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    nome: string
    categoria: string
    observacoes?: string | null
    status?: string
    preco: number
    deleted?: boolean
  }

  export type ProdutoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FaturaCreateInput = {
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutFaturasInput
    pedidos?: PedidoCreateNestedManyWithoutFaturaInput
  }

  export type FaturaUncheckedCreateInput = {
    id?: number
    utilizadorId: number
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutFaturaInput
  }

  export type FaturaUpdateInput = {
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutFaturasNestedInput
    pedidos?: PedidoUpdateManyWithoutFaturaNestedInput
  }

  export type FaturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutFaturaNestedInput
  }

  export type FaturaCreateManyInput = {
    id?: number
    utilizadorId: number
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
  }

  export type FaturaUpdateManyMutationInput = {
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FaturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type PedidoListRelationFilter = {
    every?: PedidoWhereInput
    some?: PedidoWhereInput
    none?: PedidoWhereInput
  }

  export type ReservaListRelationFilter = {
    every?: ReservaWhereInput
    some?: ReservaWhereInput
    none?: ReservaWhereInput
  }

  export type FaturaListRelationFilter = {
    every?: FaturaWhereInput
    some?: FaturaWhereInput
    none?: FaturaWhereInput
  }

  export type PedidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilizadorCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telefone?: SortOrder
    role?: SortOrder
    deleted?: SortOrder
  }

  export type UtilizadorAvgOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type UtilizadorMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telefone?: SortOrder
    role?: SortOrder
    deleted?: SortOrder
  }

  export type UtilizadorMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telefone?: SortOrder
    role?: SortOrder
    deleted?: SortOrder
  }

  export type UtilizadorSumOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UtilizadorRelationFilter = {
    is?: UtilizadorWhereInput
    isNot?: UtilizadorWhereInput
  }

  export type ReservaCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    data?: SortOrder
    quantidade?: SortOrder
    observacoes?: SortOrder
    deleted?: SortOrder
  }

  export type ReservaAvgOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    quantidade?: SortOrder
  }

  export type ReservaMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    data?: SortOrder
    quantidade?: SortOrder
    observacoes?: SortOrder
    deleted?: SortOrder
  }

  export type ReservaMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    data?: SortOrder
    quantidade?: SortOrder
    observacoes?: SortOrder
    deleted?: SortOrder
  }

  export type ReservaSumOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    mesa?: SortOrder
    quantidade?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ReservaRelationFilter = {
    is?: ReservaWhereInput
    isNot?: ReservaWhereInput
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type FaturaRelationFilter = {
    is?: FaturaWhereInput | null
    isNot?: FaturaWhereInput | null
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PedidoCountOrderByAggregateInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    observacoes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    faturaID?: SortOrder
    deleted?: SortOrder
  }

  export type PedidoAvgOrderByAggregateInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    faturaID?: SortOrder
  }

  export type PedidoMaxOrderByAggregateInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    observacoes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    faturaID?: SortOrder
    deleted?: SortOrder
  }

  export type PedidoMinOrderByAggregateInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    observacoes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    faturaID?: SortOrder
    deleted?: SortOrder
  }

  export type PedidoSumOrderByAggregateInput = {
    id?: SortOrder
    mesa?: SortOrder
    utilizadorId?: SortOrder
    reservaId?: SortOrder
    faturaID?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    observacoes?: SortOrder
    status?: SortOrder
    preco?: SortOrder
    deleted?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    observacoes?: SortOrder
    status?: SortOrder
    preco?: SortOrder
    deleted?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    observacoes?: SortOrder
    status?: SortOrder
    preco?: SortOrder
    deleted?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type FaturaCountOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    documentoParaFatura?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    statusPagamento?: SortOrder
    deleted?: SortOrder
  }

  export type FaturaAvgOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type FaturaMaxOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    documentoParaFatura?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    statusPagamento?: SortOrder
    deleted?: SortOrder
  }

  export type FaturaMinOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    documentoParaFatura?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    statusPagamento?: SortOrder
    deleted?: SortOrder
  }

  export type FaturaSumOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type PedidoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutUtilizadorInput>, Enumerable<PedidoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutUtilizadorInput>
    createMany?: PedidoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type ReservaCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<ReservaCreateWithoutUtilizadorInput>, Enumerable<ReservaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<ReservaCreateOrConnectWithoutUtilizadorInput>
    createMany?: ReservaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<ReservaWhereUniqueInput>
  }

  export type FaturaCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<FaturaCreateWithoutUtilizadorInput>, Enumerable<FaturaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<FaturaCreateOrConnectWithoutUtilizadorInput>
    createMany?: FaturaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<FaturaWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutUtilizadorInput>, Enumerable<PedidoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutUtilizadorInput>
    createMany?: PedidoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type ReservaUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<ReservaCreateWithoutUtilizadorInput>, Enumerable<ReservaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<ReservaCreateOrConnectWithoutUtilizadorInput>
    createMany?: ReservaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<ReservaWhereUniqueInput>
  }

  export type FaturaUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<FaturaCreateWithoutUtilizadorInput>, Enumerable<FaturaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<FaturaCreateOrConnectWithoutUtilizadorInput>
    createMany?: FaturaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<FaturaWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PedidoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutUtilizadorInput>, Enumerable<PedidoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: PedidoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type ReservaUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<ReservaCreateWithoutUtilizadorInput>, Enumerable<ReservaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<ReservaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<ReservaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: ReservaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<ReservaWhereUniqueInput>
    disconnect?: Enumerable<ReservaWhereUniqueInput>
    delete?: Enumerable<ReservaWhereUniqueInput>
    connect?: Enumerable<ReservaWhereUniqueInput>
    update?: Enumerable<ReservaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<ReservaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<ReservaScalarWhereInput>
  }

  export type FaturaUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<FaturaCreateWithoutUtilizadorInput>, Enumerable<FaturaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<FaturaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<FaturaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: FaturaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<FaturaWhereUniqueInput>
    disconnect?: Enumerable<FaturaWhereUniqueInput>
    delete?: Enumerable<FaturaWhereUniqueInput>
    connect?: Enumerable<FaturaWhereUniqueInput>
    update?: Enumerable<FaturaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<FaturaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<FaturaScalarWhereInput>
  }

  export type PedidoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutUtilizadorInput>, Enumerable<PedidoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: PedidoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type ReservaUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<ReservaCreateWithoutUtilizadorInput>, Enumerable<ReservaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<ReservaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<ReservaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: ReservaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<ReservaWhereUniqueInput>
    disconnect?: Enumerable<ReservaWhereUniqueInput>
    delete?: Enumerable<ReservaWhereUniqueInput>
    connect?: Enumerable<ReservaWhereUniqueInput>
    update?: Enumerable<ReservaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<ReservaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<ReservaScalarWhereInput>
  }

  export type FaturaUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<FaturaCreateWithoutUtilizadorInput>, Enumerable<FaturaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<FaturaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<FaturaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: FaturaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<FaturaWhereUniqueInput>
    disconnect?: Enumerable<FaturaWhereUniqueInput>
    delete?: Enumerable<FaturaWhereUniqueInput>
    connect?: Enumerable<FaturaWhereUniqueInput>
    update?: Enumerable<FaturaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<FaturaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<FaturaScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutReservasInput = {
    create?: XOR<UtilizadorCreateWithoutReservasInput, UtilizadorUncheckedCreateWithoutReservasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutReservasInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type PedidoCreateNestedManyWithoutReservaInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutReservaInput>, Enumerable<PedidoUncheckedCreateWithoutReservaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutReservaInput>
    createMany?: PedidoCreateManyReservaInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutReservaInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutReservaInput>, Enumerable<PedidoUncheckedCreateWithoutReservaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutReservaInput>
    createMany?: PedidoCreateManyReservaInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type UtilizadorUpdateOneRequiredWithoutReservasNestedInput = {
    create?: XOR<UtilizadorCreateWithoutReservasInput, UtilizadorUncheckedCreateWithoutReservasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutReservasInput
    upsert?: UtilizadorUpsertWithoutReservasInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutReservasInput, UtilizadorUncheckedUpdateWithoutReservasInput>
  }

  export type PedidoUpdateManyWithoutReservaNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutReservaInput>, Enumerable<PedidoUncheckedCreateWithoutReservaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutReservaInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutReservaInput>
    createMany?: PedidoCreateManyReservaInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutReservaInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutReservaInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type PedidoUncheckedUpdateManyWithoutReservaNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutReservaInput>, Enumerable<PedidoUncheckedCreateWithoutReservaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutReservaInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutReservaInput>
    createMany?: PedidoCreateManyReservaInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutReservaInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutReservaInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutPedidosInput = {
    create?: XOR<UtilizadorCreateWithoutPedidosInput, UtilizadorUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutPedidosInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type ReservaCreateNestedOneWithoutPedidosInput = {
    create?: XOR<ReservaCreateWithoutPedidosInput, ReservaUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: ReservaCreateOrConnectWithoutPedidosInput
    connect?: ReservaWhereUniqueInput
  }

  export type ProdutoCreateNestedManyWithoutPedidosInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutPedidosInput>, Enumerable<ProdutoUncheckedCreateWithoutPedidosInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutPedidosInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type FaturaCreateNestedOneWithoutPedidosInput = {
    create?: XOR<FaturaCreateWithoutPedidosInput, FaturaUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: FaturaCreateOrConnectWithoutPedidosInput
    connect?: FaturaWhereUniqueInput
  }

  export type ProdutoUncheckedCreateNestedManyWithoutPedidosInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutPedidosInput>, Enumerable<ProdutoUncheckedCreateWithoutPedidosInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutPedidosInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
  }

  export type UtilizadorUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<UtilizadorCreateWithoutPedidosInput, UtilizadorUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutPedidosInput
    upsert?: UtilizadorUpsertWithoutPedidosInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutPedidosInput, UtilizadorUncheckedUpdateWithoutPedidosInput>
  }

  export type ReservaUpdateOneRequiredWithoutPedidosNestedInput = {
    create?: XOR<ReservaCreateWithoutPedidosInput, ReservaUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: ReservaCreateOrConnectWithoutPedidosInput
    upsert?: ReservaUpsertWithoutPedidosInput
    connect?: ReservaWhereUniqueInput
    update?: XOR<ReservaUpdateWithoutPedidosInput, ReservaUncheckedUpdateWithoutPedidosInput>
  }

  export type ProdutoUpdateManyWithoutPedidosNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutPedidosInput>, Enumerable<ProdutoUncheckedCreateWithoutPedidosInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutPedidosInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutPedidosInput>
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutPedidosInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutPedidosInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type FaturaUpdateOneWithoutPedidosNestedInput = {
    create?: XOR<FaturaCreateWithoutPedidosInput, FaturaUncheckedCreateWithoutPedidosInput>
    connectOrCreate?: FaturaCreateOrConnectWithoutPedidosInput
    upsert?: FaturaUpsertWithoutPedidosInput
    disconnect?: boolean
    delete?: boolean
    connect?: FaturaWhereUniqueInput
    update?: XOR<FaturaUpdateWithoutPedidosInput, FaturaUncheckedUpdateWithoutPedidosInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdutoUncheckedUpdateManyWithoutPedidosNestedInput = {
    create?: XOR<Enumerable<ProdutoCreateWithoutPedidosInput>, Enumerable<ProdutoUncheckedCreateWithoutPedidosInput>>
    connectOrCreate?: Enumerable<ProdutoCreateOrConnectWithoutPedidosInput>
    upsert?: Enumerable<ProdutoUpsertWithWhereUniqueWithoutPedidosInput>
    set?: Enumerable<ProdutoWhereUniqueInput>
    disconnect?: Enumerable<ProdutoWhereUniqueInput>
    delete?: Enumerable<ProdutoWhereUniqueInput>
    connect?: Enumerable<ProdutoWhereUniqueInput>
    update?: Enumerable<ProdutoUpdateWithWhereUniqueWithoutPedidosInput>
    updateMany?: Enumerable<ProdutoUpdateManyWithWhereWithoutPedidosInput>
    deleteMany?: Enumerable<ProdutoScalarWhereInput>
  }

  export type PedidoCreateNestedManyWithoutProdutosInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutProdutosInput>, Enumerable<PedidoUncheckedCreateWithoutProdutosInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutProdutosInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutProdutosInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutProdutosInput>, Enumerable<PedidoUncheckedCreateWithoutProdutosInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutProdutosInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PedidoUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutProdutosInput>, Enumerable<PedidoUncheckedCreateWithoutProdutosInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutProdutosInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutProdutosInput>
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutProdutosInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutProdutosInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type PedidoUncheckedUpdateManyWithoutProdutosNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutProdutosInput>, Enumerable<PedidoUncheckedCreateWithoutProdutosInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutProdutosInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutProdutosInput>
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutProdutosInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutProdutosInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutFaturasInput = {
    create?: XOR<UtilizadorCreateWithoutFaturasInput, UtilizadorUncheckedCreateWithoutFaturasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutFaturasInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type PedidoCreateNestedManyWithoutFaturaInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFaturaInput>, Enumerable<PedidoUncheckedCreateWithoutFaturaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFaturaInput>
    createMany?: PedidoCreateManyFaturaInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type PedidoUncheckedCreateNestedManyWithoutFaturaInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFaturaInput>, Enumerable<PedidoUncheckedCreateWithoutFaturaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFaturaInput>
    createMany?: PedidoCreateManyFaturaInputEnvelope
    connect?: Enumerable<PedidoWhereUniqueInput>
  }

  export type UtilizadorUpdateOneRequiredWithoutFaturasNestedInput = {
    create?: XOR<UtilizadorCreateWithoutFaturasInput, UtilizadorUncheckedCreateWithoutFaturasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutFaturasInput
    upsert?: UtilizadorUpsertWithoutFaturasInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutFaturasInput, UtilizadorUncheckedUpdateWithoutFaturasInput>
  }

  export type PedidoUpdateManyWithoutFaturaNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFaturaInput>, Enumerable<PedidoUncheckedCreateWithoutFaturaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFaturaInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutFaturaInput>
    createMany?: PedidoCreateManyFaturaInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutFaturaInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutFaturaInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type PedidoUncheckedUpdateManyWithoutFaturaNestedInput = {
    create?: XOR<Enumerable<PedidoCreateWithoutFaturaInput>, Enumerable<PedidoUncheckedCreateWithoutFaturaInput>>
    connectOrCreate?: Enumerable<PedidoCreateOrConnectWithoutFaturaInput>
    upsert?: Enumerable<PedidoUpsertWithWhereUniqueWithoutFaturaInput>
    createMany?: PedidoCreateManyFaturaInputEnvelope
    set?: Enumerable<PedidoWhereUniqueInput>
    disconnect?: Enumerable<PedidoWhereUniqueInput>
    delete?: Enumerable<PedidoWhereUniqueInput>
    connect?: Enumerable<PedidoWhereUniqueInput>
    update?: Enumerable<PedidoUpdateWithWhereUniqueWithoutFaturaInput>
    updateMany?: Enumerable<PedidoUpdateManyWithWhereWithoutFaturaInput>
    deleteMany?: Enumerable<PedidoScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type PedidoCreateWithoutUtilizadorInput = {
    mesa: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    reserva: ReservaCreateNestedOneWithoutPedidosInput
    produtos?: ProdutoCreateNestedManyWithoutPedidosInput
    fatura?: FaturaCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    mesa: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
    produtos?: ProdutoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidoCreateOrConnectWithoutUtilizadorInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutUtilizadorInput, PedidoUncheckedCreateWithoutUtilizadorInput>
  }

  export type PedidoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<PedidoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type ReservaCreateWithoutUtilizadorInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutReservaInput
  }

  export type ReservaUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutReservaInput
  }

  export type ReservaCreateOrConnectWithoutUtilizadorInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutUtilizadorInput, ReservaUncheckedCreateWithoutUtilizadorInput>
  }

  export type ReservaCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<ReservaCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type FaturaCreateWithoutUtilizadorInput = {
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutFaturaInput
  }

  export type FaturaUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutFaturaInput
  }

  export type FaturaCreateOrConnectWithoutUtilizadorInput = {
    where: FaturaWhereUniqueInput
    create: XOR<FaturaCreateWithoutUtilizadorInput, FaturaUncheckedCreateWithoutUtilizadorInput>
  }

  export type FaturaCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<FaturaCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type PedidoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutUtilizadorInput, PedidoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<PedidoCreateWithoutUtilizadorInput, PedidoUncheckedCreateWithoutUtilizadorInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutUtilizadorInput, PedidoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type PedidoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type PedidoScalarWhereInput = {
    AND?: Enumerable<PedidoScalarWhereInput>
    OR?: Enumerable<PedidoScalarWhereInput>
    NOT?: Enumerable<PedidoScalarWhereInput>
    id?: IntFilter | number
    mesa?: IntFilter | number
    utilizadorId?: IntFilter | number
    reservaId?: IntFilter | number
    observacoes?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    faturaID?: IntNullableFilter | number | null
    deleted?: BoolFilter | boolean
  }

  export type ReservaUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: ReservaWhereUniqueInput
    update: XOR<ReservaUpdateWithoutUtilizadorInput, ReservaUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<ReservaCreateWithoutUtilizadorInput, ReservaUncheckedCreateWithoutUtilizadorInput>
  }

  export type ReservaUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: ReservaWhereUniqueInput
    data: XOR<ReservaUpdateWithoutUtilizadorInput, ReservaUncheckedUpdateWithoutUtilizadorInput>
  }

  export type ReservaUpdateManyWithWhereWithoutUtilizadorInput = {
    where: ReservaScalarWhereInput
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyWithoutReservasInput>
  }

  export type ReservaScalarWhereInput = {
    AND?: Enumerable<ReservaScalarWhereInput>
    OR?: Enumerable<ReservaScalarWhereInput>
    NOT?: Enumerable<ReservaScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    utilizadorId?: IntFilter | number
    mesa?: IntFilter | number
    data?: DateTimeFilter | Date | string
    quantidade?: IntFilter | number
    observacoes?: StringNullableFilter | string | null
    deleted?: BoolFilter | boolean
  }

  export type FaturaUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: FaturaWhereUniqueInput
    update: XOR<FaturaUpdateWithoutUtilizadorInput, FaturaUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<FaturaCreateWithoutUtilizadorInput, FaturaUncheckedCreateWithoutUtilizadorInput>
  }

  export type FaturaUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: FaturaWhereUniqueInput
    data: XOR<FaturaUpdateWithoutUtilizadorInput, FaturaUncheckedUpdateWithoutUtilizadorInput>
  }

  export type FaturaUpdateManyWithWhereWithoutUtilizadorInput = {
    where: FaturaScalarWhereInput
    data: XOR<FaturaUpdateManyMutationInput, FaturaUncheckedUpdateManyWithoutFaturasInput>
  }

  export type FaturaScalarWhereInput = {
    AND?: Enumerable<FaturaScalarWhereInput>
    OR?: Enumerable<FaturaScalarWhereInput>
    NOT?: Enumerable<FaturaScalarWhereInput>
    id?: IntFilter | number
    utilizadorId?: IntFilter | number
    documentoParaFatura?: StringNullableFilter | string | null
    formaPagamento?: StringFilter | string
    observacoes?: StringNullableFilter | string | null
    statusPagamento?: StringFilter | string
    deleted?: BoolFilter | boolean
  }

  export type UtilizadorCreateWithoutReservasInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutReservasInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutReservasInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutReservasInput, UtilizadorUncheckedCreateWithoutReservasInput>
  }

  export type PedidoCreateWithoutReservaInput = {
    mesa: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutPedidosInput
    produtos?: ProdutoCreateNestedManyWithoutPedidosInput
    fatura?: FaturaCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateWithoutReservaInput = {
    id?: number
    mesa: number
    utilizadorId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
    produtos?: ProdutoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidoCreateOrConnectWithoutReservaInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutReservaInput, PedidoUncheckedCreateWithoutReservaInput>
  }

  export type PedidoCreateManyReservaInputEnvelope = {
    data: Enumerable<PedidoCreateManyReservaInput>
    skipDuplicates?: boolean
  }

  export type UtilizadorUpsertWithoutReservasInput = {
    update: XOR<UtilizadorUpdateWithoutReservasInput, UtilizadorUncheckedUpdateWithoutReservasInput>
    create: XOR<UtilizadorCreateWithoutReservasInput, UtilizadorUncheckedCreateWithoutReservasInput>
  }

  export type UtilizadorUpdateWithoutReservasInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutReservasInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type PedidoUpsertWithWhereUniqueWithoutReservaInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutReservaInput, PedidoUncheckedUpdateWithoutReservaInput>
    create: XOR<PedidoCreateWithoutReservaInput, PedidoUncheckedCreateWithoutReservaInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutReservaInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutReservaInput, PedidoUncheckedUpdateWithoutReservaInput>
  }

  export type PedidoUpdateManyWithWhereWithoutReservaInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type UtilizadorCreateWithoutPedidosInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    reservas?: ReservaCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutPedidosInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    reservas?: ReservaUncheckedCreateNestedManyWithoutUtilizadorInput
    faturas?: FaturaUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutPedidosInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutPedidosInput, UtilizadorUncheckedCreateWithoutPedidosInput>
  }

  export type ReservaCreateWithoutPedidosInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutReservasInput
  }

  export type ReservaUncheckedCreateWithoutPedidosInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    utilizadorId: number
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
  }

  export type ReservaCreateOrConnectWithoutPedidosInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutPedidosInput, ReservaUncheckedCreateWithoutPedidosInput>
  }

  export type ProdutoCreateWithoutPedidosInput = {
    nome: string
    categoria: string
    observacoes?: string | null
    status?: string
    preco: number
    deleted?: boolean
  }

  export type ProdutoUncheckedCreateWithoutPedidosInput = {
    id?: number
    nome: string
    categoria: string
    observacoes?: string | null
    status?: string
    preco: number
    deleted?: boolean
  }

  export type ProdutoCreateOrConnectWithoutPedidosInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutPedidosInput, ProdutoUncheckedCreateWithoutPedidosInput>
  }

  export type FaturaCreateWithoutPedidosInput = {
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutFaturasInput
  }

  export type FaturaUncheckedCreateWithoutPedidosInput = {
    id?: number
    utilizadorId: number
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
  }

  export type FaturaCreateOrConnectWithoutPedidosInput = {
    where: FaturaWhereUniqueInput
    create: XOR<FaturaCreateWithoutPedidosInput, FaturaUncheckedCreateWithoutPedidosInput>
  }

  export type UtilizadorUpsertWithoutPedidosInput = {
    update: XOR<UtilizadorUpdateWithoutPedidosInput, UtilizadorUncheckedUpdateWithoutPedidosInput>
    create: XOR<UtilizadorCreateWithoutPedidosInput, UtilizadorUncheckedCreateWithoutPedidosInput>
  }

  export type UtilizadorUpdateWithoutPedidosInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    reservas?: ReservaUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    reservas?: ReservaUncheckedUpdateManyWithoutUtilizadorNestedInput
    faturas?: FaturaUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type ReservaUpsertWithoutPedidosInput = {
    update: XOR<ReservaUpdateWithoutPedidosInput, ReservaUncheckedUpdateWithoutPedidosInput>
    create: XOR<ReservaCreateWithoutPedidosInput, ReservaUncheckedCreateWithoutPedidosInput>
  }

  export type ReservaUpdateWithoutPedidosInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservaUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    utilizadorId?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutPedidosInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutPedidosInput, ProdutoUncheckedUpdateWithoutPedidosInput>
    create: XOR<ProdutoCreateWithoutPedidosInput, ProdutoUncheckedCreateWithoutPedidosInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutPedidosInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutPedidosInput, ProdutoUncheckedUpdateWithoutPedidosInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutPedidosInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutProdutosInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: Enumerable<ProdutoScalarWhereInput>
    OR?: Enumerable<ProdutoScalarWhereInput>
    NOT?: Enumerable<ProdutoScalarWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    categoria?: StringFilter | string
    observacoes?: StringNullableFilter | string | null
    status?: StringFilter | string
    preco?: FloatFilter | number
    deleted?: BoolFilter | boolean
  }

  export type FaturaUpsertWithoutPedidosInput = {
    update: XOR<FaturaUpdateWithoutPedidosInput, FaturaUncheckedUpdateWithoutPedidosInput>
    create: XOR<FaturaCreateWithoutPedidosInput, FaturaUncheckedCreateWithoutPedidosInput>
  }

  export type FaturaUpdateWithoutPedidosInput = {
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutFaturasNestedInput
  }

  export type FaturaUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoCreateWithoutProdutosInput = {
    mesa: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutPedidosInput
    reserva: ReservaCreateNestedOneWithoutPedidosInput
    fatura?: FaturaCreateNestedOneWithoutPedidosInput
  }

  export type PedidoUncheckedCreateWithoutProdutosInput = {
    id?: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
  }

  export type PedidoCreateOrConnectWithoutProdutosInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutProdutosInput, PedidoUncheckedCreateWithoutProdutosInput>
  }

  export type PedidoUpsertWithWhereUniqueWithoutProdutosInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutProdutosInput, PedidoUncheckedUpdateWithoutProdutosInput>
    create: XOR<PedidoCreateWithoutProdutosInput, PedidoUncheckedCreateWithoutProdutosInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutProdutosInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutProdutosInput, PedidoUncheckedUpdateWithoutProdutosInput>
  }

  export type PedidoUpdateManyWithWhereWithoutProdutosInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type UtilizadorCreateWithoutFaturasInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoCreateNestedManyWithoutUtilizadorInput
    reservas?: ReservaCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutFaturasInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    password: string
    telefone?: string | null
    role?: number
    deleted?: boolean
    pedidos?: PedidoUncheckedCreateNestedManyWithoutUtilizadorInput
    reservas?: ReservaUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutFaturasInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutFaturasInput, UtilizadorUncheckedCreateWithoutFaturasInput>
  }

  export type PedidoCreateWithoutFaturaInput = {
    mesa: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    utilizador: UtilizadorCreateNestedOneWithoutPedidosInput
    reserva: ReservaCreateNestedOneWithoutPedidosInput
    produtos?: ProdutoCreateNestedManyWithoutPedidosInput
  }

  export type PedidoUncheckedCreateWithoutFaturaInput = {
    id?: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
    produtos?: ProdutoUncheckedCreateNestedManyWithoutPedidosInput
  }

  export type PedidoCreateOrConnectWithoutFaturaInput = {
    where: PedidoWhereUniqueInput
    create: XOR<PedidoCreateWithoutFaturaInput, PedidoUncheckedCreateWithoutFaturaInput>
  }

  export type PedidoCreateManyFaturaInputEnvelope = {
    data: Enumerable<PedidoCreateManyFaturaInput>
    skipDuplicates?: boolean
  }

  export type UtilizadorUpsertWithoutFaturasInput = {
    update: XOR<UtilizadorUpdateWithoutFaturasInput, UtilizadorUncheckedUpdateWithoutFaturasInput>
    create: XOR<UtilizadorCreateWithoutFaturasInput, UtilizadorUncheckedCreateWithoutFaturasInput>
  }

  export type UtilizadorUpdateWithoutFaturasInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutUtilizadorNestedInput
    reservas?: ReservaUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutFaturasInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutUtilizadorNestedInput
    reservas?: ReservaUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type PedidoUpsertWithWhereUniqueWithoutFaturaInput = {
    where: PedidoWhereUniqueInput
    update: XOR<PedidoUpdateWithoutFaturaInput, PedidoUncheckedUpdateWithoutFaturaInput>
    create: XOR<PedidoCreateWithoutFaturaInput, PedidoUncheckedCreateWithoutFaturaInput>
  }

  export type PedidoUpdateWithWhereUniqueWithoutFaturaInput = {
    where: PedidoWhereUniqueInput
    data: XOR<PedidoUpdateWithoutFaturaInput, PedidoUncheckedUpdateWithoutFaturaInput>
  }

  export type PedidoUpdateManyWithWhereWithoutFaturaInput = {
    where: PedidoScalarWhereInput
    data: XOR<PedidoUpdateManyMutationInput, PedidoUncheckedUpdateManyWithoutPedidosInput>
  }

  export type PedidoCreateManyUtilizadorInput = {
    id?: number
    mesa: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
  }

  export type ReservaCreateManyUtilizadorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mesa: number
    data: Date | string
    quantidade: number
    observacoes?: string | null
    deleted?: boolean
  }

  export type FaturaCreateManyUtilizadorInput = {
    id?: number
    documentoParaFatura?: string | null
    formaPagamento: string
    observacoes?: string | null
    statusPagamento?: string
    deleted?: boolean
  }

  export type PedidoUpdateWithoutUtilizadorInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    reserva?: ReservaUpdateOneRequiredWithoutPedidosNestedInput
    produtos?: ProdutoUpdateManyWithoutPedidosNestedInput
    fatura?: FaturaUpdateOneWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    produtos?: ProdutoUncheckedUpdateManyWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateManyWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReservaUpdateWithoutUtilizadorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutReservaNestedInput
  }

  export type ReservaUncheckedUpdateManyWithoutReservasInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mesa?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    quantidade?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FaturaUpdateWithoutUtilizadorInput = {
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUpdateManyWithoutFaturaNestedInput
  }

  export type FaturaUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    pedidos?: PedidoUncheckedUpdateManyWithoutFaturaNestedInput
  }

  export type FaturaUncheckedUpdateManyWithoutFaturasInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoParaFatura?: NullableStringFieldUpdateOperationsInput | string | null
    formaPagamento?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    statusPagamento?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoCreateManyReservaInput = {
    id?: number
    mesa: number
    utilizadorId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    faturaID?: number | null
    deleted?: boolean
  }

  export type PedidoUpdateWithoutReservaInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutPedidosNestedInput
    produtos?: ProdutoUpdateManyWithoutPedidosNestedInput
    fatura?: FaturaUpdateOneWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateWithoutReservaInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    produtos?: ProdutoUncheckedUpdateManyWithoutPedidosNestedInput
  }

  export type ProdutoUpdateWithoutPedidosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoUncheckedUpdateWithoutPedidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutoUncheckedUpdateManyWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoUpdateWithoutProdutosInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutPedidosNestedInput
    reserva?: ReservaUpdateOneRequiredWithoutPedidosNestedInput
    fatura?: FaturaUpdateOneWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    faturaID?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PedidoCreateManyFaturaInput = {
    id?: number
    mesa: number
    utilizadorId: number
    reservaId: number
    observacoes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    deleted?: boolean
  }

  export type PedidoUpdateWithoutFaturaInput = {
    mesa?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    utilizador?: UtilizadorUpdateOneRequiredWithoutPedidosNestedInput
    reserva?: ReservaUpdateOneRequiredWithoutPedidosNestedInput
    produtos?: ProdutoUpdateManyWithoutPedidosNestedInput
  }

  export type PedidoUncheckedUpdateWithoutFaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    mesa?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    reservaId?: IntFieldUpdateOperationsInput | number
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    produtos?: ProdutoUncheckedUpdateManyWithoutPedidosNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}